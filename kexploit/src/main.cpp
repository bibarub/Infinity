#include "kexploit.h"

#include "k660.h"

#include <pspkernel.h>
#include <pspsdk.h>

#include <algorithm>
#include <array>
#include <string>

namespace
{
    constexpr auto firmwareVersion(const char fw[4])
    {
        return ((fw[0] - '0') << 24) | ((fw[2] - '0') << 16) | ((fw[3] - '0') << 8) | 0x10;
    }

    struct SupportedFirmware
    {
        int version;
        int (*executeInKernelMode)(KernelFunction kfunc);
    };

    constexpr std::array<SupportedFirmware, 2> g_supported{ {
        { firmwareVersion("6.60"), k660::executeInKernelMode },
        { firmwareVersion("6.61"), k660::executeInKernelMode },
    } };
}

int executeInKernelMode(KernelFunction kfunc)
{
    auto version = sceKernelDevkitVersion();

    auto it = std::find_if(g_supported.cbegin(), g_supported.cend(), [version](auto supported) {
        return (version == supported.version);
    });

    if (it == g_supported.end())
        return -1;

    return it->executeInKernelMode(kfunc);
}
