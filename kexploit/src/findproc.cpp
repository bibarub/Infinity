#include "findproc.h"

#include <psploadcore.h>
#include <string.h>

uintptr_t findProc(KernelContext* ctx, const char* modname, const char* lib, unsigned int nid)
{
    // declare our local vars
    unsigned int i = 0, u = 0;

    // find the module
    auto mod = ctx->pspKernelFindModuleByName(modname);

    // if no mod, error
    if (!mod)
    {
        return 0;
    }

    // get the entry info
    unsigned int entry_size = mod->ent_size;
    unsigned int entry_start = (unsigned int)mod->ent_top;

    // scan through the export list
    while (i < entry_size)
    {
        // point to the entry
        SceLibraryEntryTable* entry = (SceLibraryEntryTable*)(entry_start + i);

        // if there is a libname, check if it's the libname we want
        if (entry->libname && (strcmp((char*)entry->libname, lib) == 0))
        {
            // now lets scan through the stubs for our nid
            unsigned int* table = reinterpret_cast<unsigned int*>(entry->entrytable);
            unsigned int total = entry->stubcount + entry->vstubcount;

            // if there is nids, lets continue
            if (total > 0)
            {
                // scan through the nidtable
                for (u = 0; u < total; u++)
                {
                    // check if its the nid we're looking for
                    if (table[u] == nid)
                    {
                        // our nid, let return the address
                        return table[u + total];
                    }
                }
            }
        }

        // update entry counter
        i += (entry->len << 2);
    }

    // lib not found ):
    return 0;
}
